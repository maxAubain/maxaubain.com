{
  "header": {
    "date": {
      "post": "Feb. 26, 2020",
      "update": ""
    },
    "title": {
      "main": "Webpack - a utility for managing front end static assets",
      "subtitle": "A review of functionality and value added, with examples from a React app"
    },
    "image": {
      "src": "img/webpack-logo.png",
      "alt": "webpack-logo"
    }
  },
  "body": [
    {
      "paragraph": "Webpack [1] is an essential library used in the Node ecosystem, and integral with the optimizing and 'packaging' of static assets in the front end.  The library is a utility -- as in, it has various, but separate, uses throughout the application.  The value of its multiple functions are dependent on the context in which they are used, much like the various 'blades' of Swiss Army Knife are useful in opening cardboard boxes, filing nails, or unfastening a screw."
    },
    {
      "quote": "The value of [Webpack's] multiple functions are dependent on the context in which they are used, much like the various 'blades' of a Swiss Army Knife are useful in opening cardboard boxes, filing nails, or unfastening a screw."
    },
    {
      "paragraph": "The two contexts which drive the configuration of Webpack are how the developer plans to use it in 1) development mode or 2) production mode.  For example, an asset tree can be exported for review in a development build, which can help track and troubleshoot the location and hierarchy of assets.  However, revealing the asset tree in production would a critical security vulnuerability.  Some of the fundamental Webpack tools and the contexts for their implementation will be discussed in detail later on."
    },
    {
      "paragraph": "While Webpack has many different types of tools, they all support static asset management.  What are static assets?  Fonts, stylesheets, images, pdfs, even React components... any file, element, or structure in the webpage DOM that is not expected to mutate once loaded on the webpage; a front end (connected to a REST API) is comprised of these static assets. The default configuration of a webpage is to load the static assets in the order in which they 'hit' the browser, which can lead to long or messy-looking page loads -- a true eyesore and sure way to lose the visitor's confidence.  The key concept to keep in mind when thinking about how to use Webpack is that it lets the developer customize the grouping of assets so that they are rendered in memory efficient and user friendly ways."
    },
    {
      "divide": ""
    },
    {
      "paragraph": "DEVELOPMENT"
    },
    {
      "divide": ""
    },
    {
      "paragraph": "PRODUCTION"
    },
    {
      "paragraph": "Webpack immediately offers two benefits with its 'standard' configuration.  First, it uses minimization algorithms (essentially removing unsed characters in the code) so that each bundled asset is reduced in size, thus browser load time can be reduced.  Second, it allows for configuration of bundles, enabling certain assets to be bundled, and therefore loaded, together.  This second feature enables "
    },
    {
      "image": {
        "src": "",
        "alt": "alt-text",
        "width": "",
        "caption": "Social media preview"
      }
    }
  ],
  "footnotes": [
    {
      "number": 1,
      "text": "Media (e.g. images, logos, brand names, etc.) and statements referencing webpack (TM) are intended for use in this post in accordance with OpenJS policies.",
      "url": "https://openjsf.org/wp-content/uploads/sites/84/2019/10/OpenJS-Foundation-Trademark-Policy-2019-10-22.pdf"
    },
    {
      "number": 2,
      "text": "Using webpack to split optimized assets into chunks for faster browser reload.",
      "url": "https://medium.com/hackernoon/the-100-correct-way-to-split-your-chunks-with-webpack-f8a9df5b7758"
    }
  ]
}
